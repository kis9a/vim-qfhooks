*QFHOOKS*             Quickfix and Location List Hooks Plugin for Vim          *qfhooks.txt*

==============================================================================
CONTENTS                                            *qfhooks-contents*

1. Introduction ....................................... |qfhooks-introduction|
2. Installation & Setup ............................... |qfhooks-installation|
3. Commands ........................................... |qfhooks-commands|
4. Configuration Options .............................. |qfhooks-configuration|
5. Hook Execution Logic ............................... |qfhooks-hooks|
6. Error Handling ..................................... |qfhooks-errors|
7. Enums and Internal Utilities ....................... |qfhooks-internals|

==============================================================================

1. Introduction                                        *qfhooks-introduction*

`qfhooks` is a Vim plugin that enhances Quickfix and Location List navigation by
providing hooks that can execute custom logic before and after certain
Quickfix and Location List commands. It also supports fallback commands if the
lists are empty or an error occurs during navigation.

==============================================================================

2. Installation & Setup                                *qfhooks-installation*

To use `qfhooks`, add it to your plugin manager or source it manually.

Example with vim-plug:

```vim
Plug 'kis9a/qfhooks'
```

Make sure the plugin is loaded only once:

```vim
if exists('g:loaded_qfhooks')
  finish
endif
let g:loaded_qfhooks = 1
```

==============================================================================

3. Commands                                             *qfhooks-commands*

The following commands extend the behavior of default Quickfix and Location List commands.
Each command can be executed with a bang (`!`) to modify its behavior.

### Quickfix Commands

| Command                    | Description                                    |
| ------------------------   | ---------------------------------------------- |
| `:[nr]QFHooksCnext[!]`     | Go to the next Quickfix item or wrap to first. |
| `:[nr]QFHooksCprevious[!]` | Go to the previous item or wrap to last.       |
| `:QFHooksCc[!][nr]`        | Jump to the given Quickfix entry.              |
| `:QFHooksCfirst[!][nr]`    | Go to the first Quickfix entry.                |
| `:QFHooksClast[!][nr]`     | Go to the last Quickfix entry.                 |
| `:QFHooksCopen[height]`    | Open the Quickfix window.                      |
| `:QFHooksCwindow[height]`  | Open Quickfix window if items exist.           |
| `:QFHooksCclose`           | Close the Quickfix window.                     |

### Location List Commands

| Command                    | Description                                         |
| ------------------------   | --------------------------------------------------  |
| `:[nr]QFHooksLnext[!]`     | Go to the next Location List item or wrap to first. |
| `:[nr]QFHooksLprevious[!]` | Go to the previous item or wrap to last.            |
| `:QFHooksLl[!][nr]`        | Jump to the given Location List entry.              |
| `:QFHooksLfirst[!][nr]`    | Go to the first Location List entry.                |
| `:QFHooksLlast[!][nr]`     | Go to the last Location List entry.                 |
| `:QFHooksLopen[height]`    | Open the Location List window.                      |
| `:QFHooksLwindow[height]`  | Open Location List window if items exist.           |
| `:QFHooksLclose`           | Close the Location List window.                     |

Examples:
```
:QFHooksCnext
:QFHooksLl! 10
:QFHooksLopen 5
```

==============================================================================

4. Configuration Options                               *qfhooks-configuration*

The plugin provides several global variables for customization.

| Variable                            |  Description                                                              |
| ----------------------------------- |  ------------------------------------------------------------------------ |
| `g:qfhooks_context_hook_key`        |  Key to identify context hooks.                                           |
| `g:qfhooks_context_hooks`           |  Dictionary of context hooks, each containing a list of hook definitions. |
| `g:qfhooks_title_hooks`             |  Dictionary of title hooks, each containing a list of hook definitions.   |
| `g:qfhooks_no_items_error_func`     |  Function called when no items are found.                                 |
| `g:qfhooks_cmds`                    | List of supported commands.                                               |
| `g:qfhooks_default_cmds`            |  List of default commands.                                                |

To override the default error handler:

```vim
function! MyCustomErrorHandler()
  echom "No items in the list!"
endfunction

let g:qfhooks_no_items_error_func = 'MyCustomErrorHandler'
```

==============================================================================

5. Hook Execution Logic                                  *qfhooks-hooks*

Hooks can be triggered at two stages: `before` and `after` the execution of a command.
Each hook is defined by several fields that control its behavior.

### Hook Fields Overview

| Field      | Description                                                                 |
|------------|-----------------------------------------------------------------------------|
| `stage`    | When to execute the hook (`'before'` or `'after'`). Defaults to `'after'`.  |
| `priority` | Execution order of hooks. Lower values run first. Defaults to `10`.         |
| `hook`     | The function **or command** to execute when the hook is triggered.          |

### Context Hooks Example

```vim
let g:qfhooks_context_hooks = {
\ 'example_context': [{
\   'stage': 'before',
\   'cmds': ['cnext', 'cc', 'lnext', 'll'],
\   'hook': function('MyHookFunction')
\ }]}
```

### Title Hooks Example

```vim
let g:qfhooks_title_hooks = {
\ 'example_title': [{
\   'stage': 'after',
\   'cmds': ['copen', 'lopen'],
\   'hook': 'echo "Title hook triggered!"'
\ }]}
```

Each hook definition is wrapped in a **list** to allow multiple hooks for the same context or title.

- **Context Hooks**: Triggered based on the Quickfix or Location List context.
- **Title Hooks**: Triggered based on matching patterns in the Quickfix or Location List title.

==============================================================================

6. Error Handling                                        *qfhooks-errors*

The plugin defines a default error handler function:

```vim
function! QfHooksNoItemsErrorFunc()
  echom "No items found in the list."
endfunction
```

This function is called when no items are present in the Quickfix or Location List. You can override it by defining a custom function and setting it as `g:qfhooks_no_items_error_func`.

Error cases handled:

- **E553**: Handled by switching to the fallback command (`cfirst`/`clast` or `lfirst`/`llast`).
- **E42**: Calls the custom error function when no items exist.

==============================================================================

7. Enums and Internal Utilities                         *qfhooks-internals*

The plugin uses enums to organize and simplify command and stage management.

| Enum Name              | Description                       |
| -----------------------|---------------------------------- |
| `g:qfhooks_cmds_enum`  | Enum for commands.                |
| `g:qfhooks_stages_enum`| Enum for hook stages.             |

Example of enum definition:

```vim
let g:qfhooks_cmds_enum = s:qfhooks_enum(['cnext', 'cprevious', 'cc', 'cfirst', 'clast', 'copen', 'cwindow', 'cclose', 'lnext', 'lprevious', 'll', 'lfirst', 'llast', 'lopen', 'lwindow', 'lclose'])
let g:qfhooks_stages_enum = s:qfhooks_enum(['before', 'after'])
let g:qfhooks_default_stage = g:qfhooks_stages_enum['after']
```

### Utility Functions

- **`qfhooks#wrap_cmd_bang(cmd, bang)`**
  Adds a `!` to the command if `bang` is true.

- **`qfhooks#wrap_around_cmd(cmd, wrap_cmd)`**
  Executes the primary command and wraps to a fallback if an error occurs.

- **`qfhooks#execute_hook(cmd, stage, list_type)`**
  Executes the appropriate hook based on the stage (`before` or `after`) and list type (`qf` for Quickfix, `loc` for Location List).

- **`qfhooks#execute_cmd(cmd)`**
  Executes the command and triggers hooks before and after execution.
